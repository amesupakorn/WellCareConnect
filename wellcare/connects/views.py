from django.shortcuts import render
from django.views import View
from .models import Disease
# Create your views here.
class HomePage(View):
    def get(self, request):
        return render(request, 'index.html',{
            
        })

class CheckPage(View):
    def get(self, request):
        return render(request, 'check.html',{
            
        })

class ShowCheckPage(View):
    def get(self, request):
        return render(request, 'showcheck.html',{
            
        })
    
class ServiceFirst(View):
    def get(self, request):
        return render(request, 'services/first.html',{
            
        })
    
class ServiceFirst1(View):
    def get(self, request):
        return render(request, 'services/first-1.html',{
            
        })
    
class ServiceFirst2(View):
    def get(self, request):
        return render(request, 'services/first-2.html',{
            
        })
    
class ServiceFirst3(View):
    def get(self, request):
        return render(request, 'services/first-3.html',{
            
        })
    
class ServiceFirst4(View):
    def get(self, request):
        return render(request, 'services/first-4.html',{
            
        })
    
class ServiceSecond(View):
    def get(self, request):
        return render(request, 'services/second.html',{
            
        })

class ServiceSecond1(View):
    def get(self, request):
        return render(request, 'services/second-1.html',{
            
        })

class ServiceSecond2(View):
    def get(self, request):
        return render(request, 'services/second-2.html',{
            
        })
    
class ServiceSecond3(View):
    def get(self, request):
        return render(request, 'services/second-3.html',{
            
        })
    
class ServiceSecond4(View):
    def get(self, request):
        return render(request, 'services/second-4.html',{
            
        })
    
class ServiceThird(View):
    def get(self, request):
        return render(request, 'services/third.html',{
            
        })

class ServiceThird1(View):
    def get(self, request):
        return render(request, 'services/third-1.html',{
            
        })

class ServiceThird2(View):
    def get(self, request):
        return render(request, 'services/third-2.html',{
            
        })
    
class ServiceThird3(View):
    def get(self, request):
        return render(request, 'services/third-3.html',{
            
        })
    
class ServiceThird4(View):
    def get(self, request):
        return render(request, 'services/third-4.html',{
            
        })
        
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from .models import Disease
import json
import base64



class ChatPage(View):
    def get(self, request):
        return render(request, 'chatbot/chat.html',{
            
        })
        

import json
import requests  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Infermedica API
from django.http import JsonResponse
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from googletrans import Translator


# ‡πÉ‡∏™‡πà API key ‡∏Ç‡∏≠‡∏á Infermedica ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
INFERMEDICA_API_KEY = "11c148e9564ce5e566cbf05d468b74ad"
INFERMEDICA_APP_ID = "b6b71842"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symptom ID ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
def load_symptoms(file_path='symptoms.json'):
    with open(file_path, 'r', encoding='utf-8') as file:
        return json.load(file)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Symptom ID
def find_symptom_id(symptom_name, symptoms_data):
    symptom_name_cleaned = symptom_name.strip()
    for symptom in symptoms_data:
        if symptom['name_th'].strip() == symptom_name_cleaned:
            return symptom['id']
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Symptom IDs ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
def find_symptom_ids(symptom_names, symptoms_data):
    symptom_ids = []
    for symptom_name in symptom_names:
        symptom_id = find_symptom_id(symptom_name, symptoms_data)
        if symptom_id:
            symptom_ids.append({"id": symptom_id, "choice_id": "present"})
    return symptom_ids

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def translate_condition_names(conditions):
    translator = Translator()
    translated_conditions = []
    for condition in conditions:
        if condition:
            translated = translator.translate(condition, src='en', dest='th').text
            translated_conditions.append(translated)
        else:
            translated_conditions.append("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
    return translated_conditions

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏õ‡πÄ‡∏û‡∏®‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
def map_sex_th_to_en(user_input):
    if user_input == "‡∏ä‡∏≤‡∏¢":
        return "male"
    elif user_input == "‡∏´‡∏ç‡∏¥‡∏á":
        return "female"
    return None


@method_decorator(csrf_exempt, name='dispatch')
class HealthWebhookView(View):

    def post(self, request, *args, **kwargs):
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request body ‡πÄ‡∏õ‡πá‡∏ô JSON
            data = json.loads(request.body)
            parameters = data['queryResult']['parameters']
            print(parameters)
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (session)
            
            output_contexts = data['queryResult'].get('outputContexts', [])
            session_context = {}

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö context ‡∏à‡∏≤‡∏Å outputContexts (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤)
            for context in output_contexts:
                if context['name'].endswith('/contexts/session'):
                    session_context = context.get('parameters', {})
                    break

            print(session_context)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            if 'sex' not in session_context:
                response_text_th = f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà WellCareChat ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ü§ó \n üëã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Å‡∏±‡∏ö‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö (‡∏ä‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏ç‡∏¥‡∏á)"

                session_context['sexcheck'] = "pending"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏®
       
            elif 'sex' in session_context and session_context['sexcheck'] == 'pending':
                user_sex_th = parameters.get('sex', None)
                if user_sex_th:
                    user_sex = map_sex_th_to_en(user_sex_th)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                    if user_sex:
                        session_context['sex'] = user_sex  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏®
                        session_context['sexcheck'] = "ok"
                        response_text_th = "‚ú® ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
                        session_context['agecheck'] = "pending"
                        print(session_context)
                    else:
                        response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö (‡∏ä‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏ç‡∏¥‡∏á)"
                        print(session_context)
                else:
                    response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö (‡∏ä‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏ç‡∏¥‡∏á)"
                    print(session_context)


            elif 'age' in session_context and session_context['agecheck'] == "pending":
                user_age = parameters.get('age', None)
                
                if user_age:
                    age_value = user_age.get('amount')  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                    age_unit = user_age.get('unit', 'year')  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ
                    
                    if age_value:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏£‡∏¥‡∏á ‡πÜ
                        session_context['age'] = age_value  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏
                        session_context['agecheck'] = "ok"
                        response_text_th = "üò∑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
                        session_context['symptomscheck'] = "pending"
                    else:
                        response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö"
                else:
                    response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö"

            elif 'synonyms' in session_context and session_context['symptomscheck'] == "pending":
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
                user_symptoms_th = parameters.get('synonyms', None)  # ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                
                if user_symptoms_th:
                    symptoms_data = load_symptoms()  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symptom ID
                    symptom_ids = find_symptom_ids(user_symptoms_th, symptoms_data)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô Symptom ID
                    if symptom_ids:
                        session_context['symptoms'] = symptom_ids  # ‡πÄ‡∏Å‡πá‡∏ö Symptom ID
                        session_context['symptomscheck'] = "ok"
                        session_context['confirmcheck'] = "pending"

                        if session_context['sex'] == 'male':    
                            response_text_th = (
                                f"‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®‡∏ß‡πà‡∏≤‡∏ä‡∏≤‡∏¢ , ‡∏≠‡∏≤‡∏¢‡∏∏ {session_context['age']} ‡∏õ‡∏µ, "
                                f"‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏≠ {', '.join(user_symptoms_th)}. "
                                "‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
                            )
                            print(session_context)

                        else:
                            
                            response_text_th = (
                                f"‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®‡∏ß‡πà‡∏≤‡∏´‡∏ç‡∏¥‡∏á , ‡∏≠‡∏≤‡∏¢‡∏∏ {session_context['age']} ‡∏õ‡∏µ, "
                                f"‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏≠ {', '.join(user_symptoms_th)}. "
                                "‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
                            )
                    else:
                        response_text_th = "‡∏Ç‡∏≠‡πÇ‡∏∑‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö"
                else:
                    response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö"

            elif 'confirm' in session_context and session_context['confirmcheck'] == "pending":
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                user_confirm = parameters.get('confirm', None)
                if user_confirm:
                    response_text_th = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...üòÉ"
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ API
                    infermedica_url = "https://api.infermedica.com/v3/diagnosis"
                    headers = {
                        "App-Id": INFERMEDICA_APP_ID,
                        "App-Key": INFERMEDICA_API_KEY,
                        "Model": "infermedica-en",
                        "Content-Type": "application/json"
                    }

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload
                    payload = {
                        "sex": session_context['sex'],
                        "age": {"value": session_context['age']},
                        "evidence": session_context['symptoms'],
                        "extras": {
                            "enable_advice": True,  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                            "enable_triage": True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
                        }
                    }

                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Infermedica API
                    response = requests.post(infermedica_url, headers=headers, json=payload)

                    if response.status_code == 200:
                        diagnosis_data = response.json()
                        conditions = diagnosis_data.get('conditions', [])

                        if conditions:
                            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                            condition_names = [condition['name'] for condition in conditions if condition['name']]
                            condition_names_th = translate_condition_names(condition_names)
                            condition_names_str = ", ".join(condition_names_th)

                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                            response_text_th += f"\n‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {condition_names_str}. "

                            # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö triage level ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            for condition in conditions:
                                triage_level = condition.get('seriousness', 'unknown')  # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
                                advice = condition.get('extras', {}).get('advice', None)  # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å extras.advice

                                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
                                if triage_level == "emergency":
                                    response_text_th += "\n‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ."
                                elif triage_level == "consultation":
                                    response_text_th += "\n‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå."
                                elif triage_level == "self_care":
                                    response_text_th += "\n‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: ‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ."

                                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                                if advice:
                                    response_text_th += f"\n‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {advice}"

                            # ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                            response_text_th += "\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
                        else:
                            response_text_th = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á."
                    else:
                        error_message = response.text
                        print(f"Error: {response.status_code} - {error_message}")
                        response_text_th = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Infermedica API."

                else:
                    response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"

            else:
                response_text_th = "‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            return JsonResponse({
                "fulfillmentText": response_text_th,
                "outputContexts": [{
                    "name": f"{data['session']}/contexts/session",
                    "lifespanCount": 10,
                    "parameters": session_context
                }]
            })

        except Exception as e:
            return JsonResponse({"fulfillmentText": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"})

    def get(self, request, *args, **kwargs):
        return JsonResponse({"status": "POST requests only allowed"}, status=405)
    

